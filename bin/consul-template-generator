#!/usr/bin/env ruby
require 'optparse' 
require 'consul/template/generator/cmd'

include Consul::Template::Generator

def verify_opts(opts)
  templates_supplied = !(opts[:templates].empty? || opts[:templates].any? { |k,v| v.nil? })
  return false unless templates_supplied
  unless opts[:graphite_host].nil?
    return false if opts[:graphite_paths].empty?
  end
  templates_supplied
end

def process_templates(t_string)
  Hash[t_string.split(',').collect do |tmpl|
    parts = tmpl.split(':')
    [parts[0], parts[1]]
  end]
end

def process_graphite_paths(t_string)
  return {} if t_string.split(',')[0].split(':').length < 3
  Hash[t_string.split(',').collect do |tmpl|
    parts = tmpl.split(':')
    [parts[0], parts[2]]
  end]
end

options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<EOC
consul-template-generator [options] <command>

Available commands:
  once    -- Run once and exit.  On success, the rendered template will be inserted into the KV store whether or not it has changed.
  run     -- Run continually, uploading the rendered template when a change is detected.

Options:
EOC

  options[:consul] = '127.0.0.1:8500'
  opts.on('-c HOSTNAME', '--consul HOSTNAME', 'Hostname/port used to connect to consul [default: 127.0.0.1:8500]') do |h|
    options[:consul] = h
  end

  options[:templates] = {}
  options[:graphite_paths] = {}
  opts.on('-t TEMPLATES',
          '--templates TEMPLATES',
          'Comma separated list of consul-template ctmpl file and keys to monitor, tmple.ctmpl:tmple-key,tmple2.ctmpl:templ-key2  (required)',
          'If \'--graphite-host\' is supplied, target graphite path must also be supplied, e.g.',
          '    tmple.ctmpl:tmple-key:consul.template.HOSTNAME.<template name>,tmple2.ctmpl:tmple-key2:consul.template.HOSTNAME.<template name>',
          'where \'HOSTNAME\' will be replaced as one might expect.') do |t|
    options[:templates] = process_templates(t)
    options[:graphite_paths] = process_graphite_paths(t)
  end

  options[:session_key] = 'consul-template-generator'
  opts.on('-s SESSION_KEY', '--session-key SESSION_KEY', 'Key used to lock template generation session [default: consul-template-generator') do |l|
    options[:session_key] = l
  end

  options[:session_ttl] = 30
  opts.on(nil, '--session-ttl SESSION_TTL', "Set a TTL for consul sessions (sets an implicit ttl on locks created by consul-template-generator [default: 30]") do |ttl|
    options[:session_ttl] = ttl.to_i
  end

  options[:unset_proxy] = false
  opts.on(nil, '--unset-proxy', "Use if 'http_proxy' is set in your environment, but you don't want to use it...") do |u|
    options[:unset_proxy] = true
  end

  options[:diff_changes] = false
  opts.on(nil, '--diff-changes', "Print diff'ed template prior to upload") do |u|
    options[:diff_changes] = true
  end

  options[:log_level] = :info
  opts.on('-l LOG_LEVEL', '--log-level LOG_LEVEL', "Log level, options are 'debug', 'info', 'error' [default: info]") do |l|
    options[:log_level] = l.to_sym
  end

  options[:cycle_sleep] = 0.5
  opts.on(nil, '--cycle-sleep CYCLE_SLEEP', "Sleep interval in seconds between each template rendering [default: 0.5]") do |s|
    options[:cycle_sleep] = s.to_f
  end

  options[:lock_sleep] = 1.0
  opts.on(nil, '--lock-sleep LOCK_SLEEP', "Sleep interval in seconds between each attempt to obtain a session lock [default: 1.0]") do |s|
    options[:cycle_sleep] = s.to_f
  end

  options[:graphite_host] = nil
  opts.on('-g GRAPHITE_HOST', '--graphite-host GRAPHITE_HOST', "Graphite host to post template update events to (optional)") do |g|
    if g.split(':').length != 2
      STDERR.puts "GRAPHITE_HOST must be defined as <host>:<port> pair\n\n"
      puts opt_parser
      exit(1)
    end
    options[:graphite_host] = g
  end
end

opt_parser.version = VERSION
opt_parser.parse!

unless verify_opts(options)
  if options[:graphite_host].nil?
    STDERR.puts "'--templates' must be provided with <template>:<key> pairs\n\n"
  else
    STDERR.puts "'--templates' must be provided with <template>:<key>:<graphite path> triplets\n\n"
  end
  puts opt_parser
  exit(1)
end

if options[:unset_proxy]
  ENV['http_proxy'] = nil
end

CMD.configure(
    options[:consul],
    options[:templates],
    options[:session_key],
    options[:log_level],
    options[:graphite_host],
    options[:graphite_paths],
    options[:diff_changes],
    options[:session_ttl]
)

ec = 1
cmd = ARGV[0]
case cmd
when 'run'
    ec = CMD.run(options[:cycle_sleep], options[:lock_sleep])
when 'once'
    ec = CMD.run_once
else
  puts "Unknown command: #{cmd}"
  puts opt_parser
end

exit(ec)
